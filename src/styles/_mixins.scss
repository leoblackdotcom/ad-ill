@mixin flexCenter() {
  display: flex;
  justify-content: center;
  align-items: center;
}

@mixin buttonHoverLt {
  transition: all 300ms linear;
  &:hover {
    background-color: $color-button-bg-active;
    border-color: $color-button-bg-active;
    color: $color-button-text-active;
  }
}

@mixin buttonHoverBlue {
  transition: all 300ms linear;
  &:hover {
    background-color: $color-button-bg-blue;
    border-color: $color-button-bg-blue;
  }
}

@mixin absFull {
  width: 100%;
  height: 100%;
  position: absolute;
  left: 0;
  top: 0;
}

@mixin coverFull {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

@mixin adobeClean(){
  font-family: "adobe-clean", "Helvetica Neue", Helvetica, Arial, sans-serif;
}

@mixin willchange($change){
  @if ($change == o){
    will-change: opacity;
  }
  @if ($change == t){
    will-change: transform;
  }
  @if ($change == to){
    will-change: opacity, transform;
  }
}

@mixin breakpoint($point) {
  @if $point == laptop {
    @media (max-width: $bp-laptop) {
      @content;
    }
  }
  @if $point == laptop_sm {
    @media (max-width: $bp-laptop-sm) {
      @content;
    }
  }
  @if $point == laptop_xs {
    @media (max-width: $bp-laptop-xs) {
      @content;
    }
  }
  @if $point == gt_laptop {
    @media (min-width: $bp-laptop + 1px) {
      @content;
    }
  }
  @if $point == med_height {
    @media (max-height: $bp-med-height) {
      @content;
    }
  }
  @if $point == short {
    @media (max-height: $bp-short) {
      @content;
    }
  }
  @if $point == xshort {
    @media (max-height: $bp-xshort) {
      @content;
    }
  }

}
//todo: remove if unused
@mixin responsive-font-sizing ($font-map) {
  $keys: map-keys($font-map);
  $values: map-values($font-map);
  // Set default font size to the first available value
  font-size: nth($values, 1);
  /* Loop through each value in the font mapping and create a media query for that value.
   *
   * This funtion creates a media query based on the current font-mq value from the font
   *  map. It then creates a new map that looks like (currentMQWidth: currentSize, nextMQWidth: nextSize)
   *  where nextMQ is the next available MQ in the font map.
   * For example: $font-map = (xs: 12px, md: 16px, lg: 18px)
   *  If current is xs, you will end up with $map = (320px: 12px, 701px: 16px)
   * Final font-size is based on the interpolation between the $map values
   */
  @each $font-mq, $font-size in $font-map {
    @if (length($font-map) >= index($keys, $font-mq) + 1){
      @include media-query(map-get($font-mqs, $font-mq)){
        @if ($font-size > nth($values, index($keys, $font-mq) + 1)){
          font-size: $font-size;
        }
        @else {
          $map: (map-get($font-breaks, $font-mq): map-get($font-map, $font-mq), map-get($font-breaks, nth($keys, index($keys, $font-mq) + 1)): nth($values, index($keys, $font-mq) + 1));
          font-size: linear-interpolation($map);
        }
      }
    }
    // Conditional hit if there's more than one value in $font-map and it's the last one.
    // Purpose is to output a final MQ based on the max font size
    @else if (length($font-map) > 1){
      @include media-query(map-get($font-mqs, nth($keys, length($keys)))){
        font-size: nth($values, length($values));
      }
    }
  }
}
/// linear-interpolation
/// Calculate the definition of a line between two points
/// @param $map - A Sass map of viewport widths and size value pairs
/// @returns A linear equation as a calc() function
/// @example
///   font-size: linear-interpolation((320px: 18px, 768px: 26px));
/// @author Jake Wilson <jake.e.wilson@gmail.com>
@function linear-interpolation($map) {
  $keys: map-keys($map);
  @if (length($keys) != 2) {
    @error "linear-interpolation() $map must be exactly 2 values";
  }
  // The slope
  $m: (map-get($map, nth($keys, 2)) - map-get($map, nth($keys, 1)))/(nth($keys, 2) - nth($keys,1));
  // The y-intercept
  $b: map-get($map, nth($keys, 1)) - $m * nth($keys, 1);
  // Determine if the sign should be positive or negative
  $sign: "+";
  @if ($b < 0) {
    $sign: "-";
    $b: abs($b);
  }
  @return calc(#{$m*100}vw #{$sign} #{$b});
}